Exercise1

task1
Arrays.stream(names).filter(x -> x.toLowerCase().startsWith("c")).collect(Collectors.toList());


task2
Arrays.stream(names).max(Comparator.comparingInt(String::length)).orElse(null);


task3
Arrays.stream(names).filter(x -> x.length() % 2 == 0).collect(Collectors.toList());


task4
Arrays.stream(names).map(x -> new StringBuilder(x).reverse().toString()).collect(Collectors.toList());


task5
Arrays.stream(names).mapToInt(String::length).sum();


task6
Arrays.stream(names).mapToInt(String::length).average().getAsDouble();


task7
numbers.stream().map(x -> (x % 2 == 0 ? "e" : "o") + x).collect(Collectors.joining(","));


task8
numbers.stream().map(x -> "+" + x + "+").collect(Collectors.toList());

Exercise2

task1
Arrays.stream(numbers).boxed().collect(Collectors.toMap(Function.identity(), v -> 1, (v1, v2) -> v1 + v2));

task2
Arrays.stream(numbers).reduce(1, (x, y) -> x * y);

task3
IntStream.range(1, number + 1).reduce(1, (x, y) -> x * y);

task4
Arrays.stream(numbers).allMatch(x -> x % 7 == 0);

task5
Arrays.stream(lists).flatMap(Arrays::stream).mapToInt(x -> (int) x.toLowerCase().chars().filter(letter -> (char) letter == 'a').count()).sum();